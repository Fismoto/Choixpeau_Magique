# coding: utf_8

Codé par : Octave FORTUN, Milo MONTAGNE, Pierrick LEFEVRE

Pseudo-code du Projet NSI 3 "Choixpeau Magique", partie I

Le programme utilise l'algorithme des k plus proches voisins pour attribuer 
une maison à un personnage en fonction de 4 caractéristiques 
(le courage, l'ambition, l'intelligence, la tendance au bien)
à l'aide d'une base de données de personnages d'Harry Potter

Licence : CC-BY-NC-SA

github : https://github.com/Fismoto/Choixpeau_Magique

DEBUT
	# Constantes :
	CARACTERISTIQUES = ('Courage', 'Ambition', 'Intelligence', 'Good')

	DEFINIR FONCTION distance_euclidienne(personnage1, personnage2, caracteristiques=CARACTERISTIQUES)

    		Cette fonction calcule la distance entre deux personnages, en utilisant 
    		la formule de la distance euclidienne.
    		Cela nous servira pour l'algorithme des kPPV.
    
    		Entrées :
		 - caracteristiques : tuple des caracteristiques qui nous
        	permettent de calculer la distance ; 
        	valeur par défaut : la constante CARACTERISTIQUES
        	- personnage1 et personnage2 : dictionnaires qui correspondent 
		chacun à un personnage avec comme clefs au minimum 
		tous les éléments de caracteristiques 
    
    		Sorties :
        	- flottant, distance euclidienne entre ces deux personnages

		Préconditions :
		- caracteristiques est un p-uplet ou un tableau
		- personnage1 et personnage2 sont tous deux des dictionnaires
		- personnage1 et personnage2 contiennent tous deux comme clefs tous les éléments de caracteristiques
		
		DEBUT
			RENVOYER la RACINE CARREE de (SOMME de ([(personnage1[clef] - personnage1[clef])**2 POUR clef DANS caracteristiques]))
		FIN
	FIN DEFINIR FONCTION


	DEFINIR FONCTION kppv_maison(base_de_donnee_des_persos, nouveau_perso, caracteristiques=CARACTERISTIQUES, k=5)

		Cette fonction renvoie la maison du nouveau personnage, 
    		définie avec l'algorithme des kPPV.
    
    		Entrées :				
		- caracteristiques : tuple des caracteristiques qui nous
        	permettent de calculer la distance ; 
        	valeur par défaut : la constante CARACTERISTIQUES

        	- base_de_donnee_des_persos : table (tableau de dictionnaires) 
        	où chaque dictionnaire  correspond à un personnage,
        	avec comme clefs toutes les informations qu'on a sur ce personnage
        	(dont au moins 'Maison', 'Courage', 'Ambition', 'Intelligence', 'Tendance au bien')

        	- nouveau_perso : dictionnaire qui correspond à un personnage
        	avec comme clefs les caractéristiques qu'on a sur ce personnage
        	(dont au moins tous les éléments de caracteristiques)
        	Note : on ne connait pas la maison de ce personnage cible,
        	c'est ce que l'on cherchera à déterminer avec l'algorithme des kPPV

		- k : entier, nombre de plus proches voisins pris en compte ;
		valeur par défaut : 5

    		Sorties : 
        	- maison_nouveau_perso : chaîne de caractères, maison prévue du nouveau personnage 
        	- k_plus_proches_voisins : tableau de dictionnaires correspondant 
        	chacun l'un des k plus proches voisins de new_character 

		Préconditions :
		- caracteristiques est un p-uplet ou un tableau
		- base_de_donnee_des_persos est un tableau de dictionnaires
		- chaque dictionnaire de la table base_de_donnee_des_persos contient 
		comme clefs tous les éléments de caractéristiques
		- nouveau_perso est un dictionnaire avec comme clefs 
		au moins tous les éléments de caractéristiques
		- k est un entier strictement positif

		Variables :
		- base_de_donnee_modifiee : tableau
		- k_plus_proches_voisins : tableau
		- maisons_des_voisins : dictionnaire
		- voisin : dictionnaire, variable de parcours séquentiel

		DEBUT
			base_de_donnee_modifiee = COPIE DE base_de_donnee_des_persos # (pour ne pas modifier de variable globale)
			
			POUR i ALLANT de 0 A longueur(base_de_donnee_modifiee)
        			base_de_donnee_modifiee[i]['Distance'] ← distance_euclidienne(nouveau_perso, base_de_donnee_modifiee[i], caracteristiques=CARACTERISTIQUES)
			FIN POUR

			TRIER base_de_donnee_modifiee PAR CLEF 'Distance' croissante
			k_plus_proches_voisins ← base_de_donnee_modifiee[:k]
			
			POUR voisin DANS k_plus_proches_voisins
				SI voisin['Maison'] EST DANS maisons_des_voisins
					maisons_des_voisins[voisin['Maison']] ← maisons_des_voisins[voisin['Maison']] + 1
				SINON
					maisons_des_voisins[voisin['Maison']] ← 1
				FIN SI
			FIN POUR
			
			items_maisons_des_voisins ← tri(maisons_des_voisins.items(), clef='Maison')
			INVERSER LE SENS DE items_maisons_des_voisins 
			
			SI items_maisons_des_voisins[0][1] > items_maisons_des_voisins[1][1]
				RENVOYER (items_maisons_des_voisins[0][0], k_plus_proches_voisins)
			SINON
				# On prend la maison qui arrive en premier (la plus proche) :
				POUR voisin DANS k_plus_proches_voisins 
					SI voisin['Maison'] EST DANS {items_maisons_des_voisins[0][0], items_maisons_des_voisins[1][0]}
						RENVOYER (voisin['Maison'], k_plus_proches_voisins)
					FIN SI
					
				FIN POUR
			FIN SI
			# On ne gère pas les cas de triple égalité ou plus
		FIN
	FIN DEFINIR FONCTION
FIN
