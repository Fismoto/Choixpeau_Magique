# coding: utf_8

Codé par : Octave FORTUN, Milo MONTAGNE, Pierrick LEFEVRE

Pseudo-code du Projet NSI 3 "Choixpeau Magique", partie I

Le programme utilise l'algorithme des k plus proches voisins pour attribuer 
une maison à un personnage en fonction de 4 caractéristiques 
(le courage, l'ambition, l'intelligence, la tendance au bien)
à l'aide d'une base de données de personnages d'Harry Potter

Licence : CC-BY-NC-SA

github : https://github.com/Fismoto/Choixpeau_Magique

DEBUT
	# Constantes :
	CARACTERISTIQUES = ('Courage', 'Ambition', 'Intelligence', 'Good')

	DEFINIR FONCTION distance_euclidienne(personnage1, personnage2, caracteristiques=CARACTERISTIQUES)

    		Cette fonction calcule la distance entre deux personnages, en utilisant 
    		la formule de la distance euclidienne.
    		Cela nous servira pour l'algorithme des kPPV.
    
    		Entrées :
		 - caracteristiques : tuple des caracteristiques qui nous
        	permettent de calculer la distance ; 
        	valeur par défaut : la constante CARACTERISTIQUES
        	- personnage1 et personnage2 : dictionnaires qui correspondent 
		chacun à un personnage avec comme clefs au minimum 
		tous les éléments de caracteristiques 
    
    		Sorties :
        	- flottant, distance euclidienne entre ces deux personnages

		Préconditions :
		- caracteristiques est un p-uplet ou un tableau
		- personnage1 et personnage2 sont tous deux des dictionnaires
		- personnage1 et personnage2 contiennent comme clefs tous les éléments de caracteristiques
		
		RENVOYER la RACINE CARREE de (SOMME de ([(personnage1[clef] - personnage1[clef])**2 POUR clef DANS caracteristiques]))

	FIN DEFINIR FONCTION


	DEFINIR FONCTION kPPV_maison(base_de_donnee_des_persos, nouveau_perso, caracteristiques=CARACTERISTIQUES, k=3)

		Cette fonction renvoie la maison du nouveau personnage, 
    		définie avec l'algorithme des kPPV.
    
    		Entrées :				
		- caracteristiques : tuple des caracteristiques qui nous
        	permettent de calculer la distance ; 
        	valeur par défaut : la constante CARACTERISTIQUES

        	- base_de_donnee_des_persos : table (tableau de dictionnaires) 
        	où chaque dictionnaire  correspond à un personnage,
        	avec comme clefs toutes les informations qu'on a sur ce personnage
        	(dont au moins 'House', 'Courage', 'Ambition', 'Intelligence', 'Good')

        	- nouveau_perso : dictionnaire qui correspond à un personnage
        	avec comme clefs les caractéristiques qu'on a sur ce personnage
        	(dont au moins tous les éléments de caracteristiques)
        	Note : on ne connait pas la maison de ce personnage cible,
        	c'est ce que l'on cherchera à déterminer avec l'algorithme des kPPV

		- k : entier, nombre de plus proches voisins pris en compte

    		Sorties : 
        	- maison_nouveau_perso : chaîne de caractères, maison prévue du nouveau personnage 
        	- k_plus_proches_voisins : tableau de tuples correspondant 
        	chacun l'un des k plus proches voisins de new_character 
        	et contenant chacun deux éléments : 
            		- un dictionnaire, l'un des k plus proches voisins 
            		du nouveau personnage
            		- un flottant, la distance entre ce même dictionnaire 
            		et le nouveau personnage.
		Note : ce tableau est trié par distance croissante

		Préconditions :
		- caracteristiques est un p-uplet ou un tableau
		- base_de_donnee_des_persos est un tableau de dictionnaires
		- chaque dictionnaire de la table base_de_donnee_des_persos contient 
		comme clefs tous les éléments de caractéristiques
		- nouveau_perso est un dictionnaire avec comme clefs 
		au moins tous les éléments de caractéristiques

		Variables :
		- liste_des_distances : tableau
		- k_plus_proches_voisins : tableau
		- maisons_des_voisins : dictionnaire ; 
			valeur initiale : {'Slytherin': 0, 'Griffindor': 0, 'Ravenclaw': 0, \
                        		'Hufflepuf': 0}

		DEBUT
			liste_des_distances = [(index, distance_euclidienne()) POUR index INCREMENTE ET POUR personnage DANS base_de_donnee_des_persos]
										# (en python : for index, personnage in enumerate(base_de_donnee_des_persos)
		FIN
	FIN DEFINIR FONCTION

FIN
